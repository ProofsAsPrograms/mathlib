/-
Copyright (c) 2022 R√©mi Bottinelli. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©mi Bottinelli
-/
import category_theory.filtered
import topology.category.Top.limits
import data.finset.basic
import category_theory.category.basic
import category_theory.full_subcategory
import data.set.finite
import data.fintype.basic
import category_theory.types

/-!
# Mittag Leffler

This files defines the Mittag-Leffler condition for cofiltered systems and (TODO) other properties
of such systems and their sections.

## Main definitions

Given the functor `F : J ‚•§ Type v`:

* For `j : J`, `F.eventual_range j` is the intersections of all ranges of morphisms `F.map f`
  where `f` has codomain `j`.
* `is_mittag_leffler` states that the functor `F : J ‚Üí Type v`, satisfies the Mittag-Leffler
  condition: the ranges of morphisms `F.map f` (with `f` having codomain `j`) stabilize.
* If `J` is cofiltered `F.to_eventual_ranges` is the subfunctor of `F` obtained by restriction
  to `F.eventual_range`.


## Main statements

* `is_mittag_leffler_of_exists_finite_range` shows that if `J` is cofiltered and for all `j`,
  there exists some `i` and `f : i ‚ü∂ j` such that the range of `F.map f` is finite, then
  `F` is Mittag-Leffler.
* `to_eventual_ranges_surjective` shows that if `F` is Mittag-Leffler, then `F.to_eventual_ranges`
  has all morphisms `F.map f` surjective.

## Todo

* Specialize to inverse systems and fintype systems.
* Prove [Stacks: Lemma 0597](https://stacks.math.columbia.edu/tag/0597)

## References

* [Stacks: Mittag-Leffler systems](https://stacks.math.columbia.edu/tag/0594)

## Tags

Mittag-Leffler, surjective, eventual range, inverse system,

-/


universes u v w


-- Two lemmas that should go into order.directed
lemma directed_on_range {Œ± Œ≤} {r : Œ± ‚Üí Œ± ‚Üí Prop} {f : Œ≤ ‚Üí Œ±} :
  directed r f ‚Üî directed_on r (set.range f) :=
by simp_rw [directed, directed_on, set.forall_range_iff, set.exists_range_iff]

--‚ü®by { rintro h _ ‚ü®x, rfl‚ü© _ ‚ü®y, rfl‚ü©, obtain ‚ü®z, hx, hy‚ü© := h x y, exact ‚ü®_, ‚ü®z, rfl‚ü©, hx, hy‚ü© },
--  Œª h x y, by { obtain ‚ü®_, ‚ü®z, rfl‚ü©, hx, hy‚ü© := h _ ‚ü®x, rfl‚ü© _ ‚ü®y, rfl‚ü©, exact ‚ü®z, hx, hy‚ü© }‚ü©

private lemma directed_on.is_bot_of_is_min {J : Type u} {s : set J} [preorder J]
  (h : directed_on (‚â•) s) (m ‚àà s) (min : ‚àÄ (a ‚àà s), a ‚â§ m ‚Üí m ‚â§ a) : ‚àÄ a ‚àà s, m ‚â§ a :=
Œª a as, let ‚ü®x, xs, xm, xa‚ü© := h m H a as in (min x xs xm).trans xa
-- this is very similar to `is_min.is_bot`, so I changed the hypothesis `min` to match `is_min`.

namespace category_theory
namespace functor

/--
The eventual range of the functor `F : J ‚•§ Type v` at index `j : J` is the intersection
of the ranges of all maps `F.map f` with `i : J` and `f : i ‚ü∂ j`.
-/
def eventual_range
  {J : Type u} [category J] (F : J ‚•§ Type v) (j : J) :=
‚ãÇ (i : J) (f : i ‚ü∂ j), set.range (F.map f)

/--
The functor `F : J ‚•§ Type v` satisfies the Mittag-Leffler condition if for all `j : J`,
there exists some `i : J` and `f : i ‚ü∂ j` such that for all `k : J` and `g : k ‚ü∂ j`, the range
of `F.map f` is contained in that of `F.map g`;
in other words (see `is_mittag_leffler_iff_eventual_range`), the eventual range at `j` is attained
by some `f : i ‚ü∂ j`.
-/
def is_mittag_leffler
  {J : Type u} [category J] (F : J ‚•§ Type v) : Prop :=
‚àÄ (j : J), ‚àÉ (i) (f : i ‚ü∂ j), ‚àÄ (k) (g : k ‚ü∂ j), set.range (F.map f) ‚äÜ set.range (F.map g)
--might consider ‚àÄ j : J, ‚àÉ i (f : i ‚ü∂ j), ‚àÄ k (g : k ‚ü∂ j) (x : F.obj i), ‚àÉ y : F.obj k, F.map g y = F.map f x

lemma is_mittag_leffler_iff_eventual_range
  {J : Type u} [category J] (F : J ‚•§ Type v) :
  F.is_mittag_leffler ‚Üî ‚àÄ (j : J), ‚àÉ (i) (f : i ‚ü∂ j), F.eventual_range j = set.range (F.map f) :=
forall_congr $ Œª j, exists‚ÇÇ_congr $ Œª i f,
  ‚ü®Œª h, (set.Inter‚ÇÇ_subset _ _).antisymm $ set.subset_Inter‚ÇÇ h, Œª h, h ‚ñ∏ set.Inter‚ÇÇ_subset‚ü©

lemma eventual_range_eq_range_precomp
  {J : Type u} [category J] (F : J ‚•§ Type v)
  {i j k : J} (f : i ‚ü∂ j) (g : j ‚ü∂ k) (h : F.eventual_range k = set.range (F.map g)) :
  F.eventual_range k = set.range (F.map $ f ‚â´ g) :=
begin
  apply subset_antisymm,
  { apply set.Inter‚ÇÇ_subset, },
  { rw [h, F.map_comp], apply set.range_comp_subset_range, }
end

lemma is_mittag_leffler_of_surjective
  {J : Type u} [category J] (F : J ‚•§ Type v)
  (h : ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.map f).surjective) : F.is_mittag_leffler :=
Œª j, ‚ü®j, ùüô j, Œª k g, by rw [map_id, types_id, set.range_id, (h k j g).range_eq]‚ü©

lemma _root_.category_theory.is_cofiltered.cone_over_cospan
  {J : Type u} [category J] [is_cofiltered_or_empty J] {i j j' : J} (f : j ‚ü∂ i) (f' : j' ‚ü∂ i) :
  ‚àÉ (k : J) (g : k ‚ü∂ j) (g' : k ‚ü∂ j'), g ‚â´ f = g' ‚â´ f' :=
-- This is shorter:
let ‚ü®k', h, h', _‚ü© := is_cofiltered_or_empty.cocone_objs j j',
    ‚ü®k, G, he‚ü© := is_cofiltered_or_empty.cocone_maps (h ‚â´ f) (h' ‚â´ f') in
‚ü®k, G ‚â´ h, G ‚â´ h', by simpa only [category.assoc]‚ü©
-- This should surely go into category_theory.filtered; I don't understand why most results there
-- are stated with `is_cofiltered` rather than `is_cofiltered_or_empty` though. Maybe because the former is shorter?

section
variables {J : Type u} [category J] (F : J ‚•§ Type v) {i j : J} (s : set (F.obj i))

lemma is_mittag_leffler_iff_subset_range_comp [is_cofiltered_or_empty J] :
  F.is_mittag_leffler ‚Üî
  ‚àÄ j : J, ‚àÉ i (f : i ‚ü∂ j), ‚àÄ k (g : k ‚ü∂ i), set.range (F.map f) ‚äÜ set.range (F.map $ g ‚â´ f) :=
begin
  refine forall_congr (Œª j, exists‚ÇÇ_congr $ Œª i f, ‚ü®Œª h k g, h k _, Œª h j' f', _‚ü©),
  obtain ‚ü®k, g, g', he‚ü© := is_cofiltered.cone_over_cospan f f',
  refine (h k g).trans _,
  rw [he, F.map_comp],
  apply set.range_comp_subset_range,
end

lemma is_mittag_leffler.mem_image_eventual_range (h : F.is_mittag_leffler) {x}
  (hx : x ‚àà F.eventual_range i) (f : j ‚ü∂ i) : ‚àÉ y ‚àà F.eventual_range j, F.map f y = x :=
begin
  rw is_mittag_leffler_iff_eventual_range at h,
  obtain ‚ü®k, g, hg‚ü© := h j, simp_rw hg,
  obtain ‚ü®x, rfl‚ü© := set.mem_Inter‚ÇÇ.1 hx k (g ‚â´ f),
  refine ‚ü®_, ‚ü®x, rfl‚ü©, by simpa only [F.map_comp]‚ü©,
end

@[simps] def restrict : J ‚•§ Type v :=
{ obj := Œª j, ‚ãÇ f : j ‚ü∂ i, F.map f ‚Åª¬π' s,
  map := Œª j k g, set.maps_to.restrict (F.map g) _ _ $ Œª x h, begin
    rw [set.mem_Inter] at h ‚ä¢, intro f,
    rw [‚Üê set.mem_preimage, set.preimage_preimage],
    convert h (g ‚â´ f), rw F.map_comp, refl,
  end,
  map_id' := Œª j, by { simp_rw F.map_id, ext, refl },
  map_comp' := Œª j k l f g, by { simp_rw F.map_comp, refl } }

lemma is_mittag_leffler.restrict [is_cofiltered_or_empty J] (h : F.is_mittag_leffler) :
  (F.restrict s).is_mittag_leffler :=
(is_mittag_leffler_iff_subset_range_comp _).2 $ Œª j, begin
  obtain ‚ü®k, g‚ÇÅ, f‚ÇÅ, -‚ü© := is_cofiltered_or_empty.cocone_objs i j,
  obtain ‚ü®l, f‚ÇÇ, h‚ÇÇ‚ü© := F.is_mittag_leffler_iff_eventual_range.1 h k,
  refine ‚ü®l, f‚ÇÇ ‚â´ f‚ÇÅ, Œª m f‚ÇÉ, _‚ü©,
  rintro _ ‚ü®x, rfl‚ü©,
  have : F.map f‚ÇÇ x.1 ‚àà F.eventual_range k, { rw h‚ÇÇ, exact ‚ü®_, rfl‚ü© },
  obtain ‚ü®y, hy, h‚ÇÉ‚ü© := h.mem_image_eventual_range F this (f‚ÇÉ ‚â´ f‚ÇÇ),
  refine ‚ü®‚ü®y, set.mem_Inter.2 $ Œª g‚ÇÇ, _‚ü©, _‚ü©,
  { obtain ‚ü®m, f‚ÇÑ, h‚ÇÑ‚ü© := is_cofiltered_or_empty.cocone_maps g‚ÇÇ ((f‚ÇÉ ‚â´ f‚ÇÇ) ‚â´ g‚ÇÅ),
    obtain ‚ü®y, rfl‚ü© := set.mem_Inter‚ÇÇ.1 hy m f‚ÇÑ,
    rw [set.mem_preimage, ‚Üê function.comp_apply (F.map _), ‚Üê types_comp, ‚Üê F.map_comp, h‚ÇÑ],
    simp_rw [F.map_comp, types_comp, function.comp_apply] at h‚ÇÉ ‚ä¢,
    rw [h‚ÇÉ, ‚Üê function.comp_apply (F.map _), ‚Üê types_comp, ‚Üê F.map_comp],
    apply set.mem_Inter.1 x.2 },
  { ext1, simp_rw [restrict_map, set.maps_to.coe_restrict_apply, subtype.coe_mk],
    rw [‚Üê category.assoc, F.map_comp, types_comp, function.comp_apply, h‚ÇÉ, F.map_comp], refl },
end

end

lemma range_directed_of_is_cofiltered
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) (j : J) :
  directed (‚äá) (Œª f : Œ£' i, i ‚ü∂ j, set.range (F.map f.2)) :=
begin
  rintros ‚ü®i, ij‚ü© ‚ü®k, kj‚ü©,
  obtain ‚ü®l, li, lk, e‚ü© := category_theory.is_cofiltered.cone_over_cospan ij kj,
  refine ‚ü®‚ü®l, li ‚â´ ij‚ü©, _, _‚ü©, swap 2, rw e,
  all_goals { simp_rw F.map_comp, apply set.range_comp_subset_range, },
end

lemma is_mittag_leffler_of_exists_finite_range
  {J : Type u} [category.{w} J] [is_cofiltered J] (F : J ‚•§ Type v)
  (h : ‚àÄ (j : J), ‚àÉ i (f : i ‚ü∂ j), (set.range (F.map f)).finite) :
  F.is_mittag_leffler :=
begin
  rintro j,
-- trying to use `well_founded.has_min`
  suffices : ‚àÉ (f : Œ£' i, i ‚ü∂ j), ‚àÄ (f' : Œ£' i, i ‚ü∂ j),
               set.range (F.map f'.2) ‚â§ set.range (F.map f.2) ‚Üí
                 set.range (F.map f'.2) = set.range (F.map f.2),
  { obtain ‚ü®‚ü®i, f‚ü©, fmin‚ü© := this,
    refine ‚ü®i, f, Œª i' f', _‚ü©,
    have := (directed_on_range.mp $ F.range_directed_of_is_cofiltered j).is_bot_of_is_min,
    sorry,
    refine directed_on_min (F.ranges_directed_of_is_cofiltered j) _ ‚ü®‚ü®i, f‚ü©,rfl‚ü© _ _ ‚ü®‚ü®i',f'‚ü©,rfl‚ü©,
    simp only [set.mem_range, psigma.exists, forall_exists_index],
    rintro _ k g rfl gf,
    exact fmin ‚ü®k,g‚ü© gf, },

  let fins := subtype { f : Œ£' i, i ‚ü∂ j | (set.range (F.map f.2)).finite },
  haveI : nonempty fins := by { obtain ‚ü®i,f,fin‚ü© := h j, exact ‚ü®‚ü®‚ü®i,f‚ü©,fin‚ü©‚ü©, },
  let fmin := function.argmin (Œª (f : fins), f.prop.to_finset.card) nat.lt_wf,
  use fmin.val,
  rintro g gf,
  cases lt_or_eq_of_le gf,
  { have gfin : (set.range (F.map g.2)).finite := fmin.prop.subset gf,
    refine ((Œª (f : fins), f.prop.to_finset.card).not_lt_argmin nat.lt_wf ‚ü®g, gfin‚ü© _).elim,
    exact finset.card_lt_card (set.finite.to_finset_ssubset.mpr h_1), },
  { assumption, },
end

/--
The subfunctor of `F` obtained by restricting to the eventual range at each index.
-/
def to_eventual_ranges
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) : J ‚•§ Type v :=
{ obj := Œª j, F.eventual_range j,
  map := Œª i j f, set.maps_to.restrict (F.map f) _ _ ( by
    { rintro x h,
      simp only [eventual_range, set.mem_Inter, set.mem_range] at h ‚ä¢,
      rintro i' f',
      obtain ‚ü®l, g, g', e‚ü© := category_theory.is_cofiltered.cone_over_cospan f f',
      obtain ‚ü®z,rfl‚ü© := h l g,
      use F.map g' z,
      replace e := congr_fun (congr_arg F.map e) z,
      simp_rw functor_to_types.map_comp_apply at e,
      exact e.symm, } ),
  map_id' := by
    { rintros, ext,
      simp only [set.maps_to.coe_restrict_apply, types_id_apply, map_id], },
  map_comp' := by
    { intros, ext,
      simp only [functor.map_comp, set.maps_to.coe_restrict_apply, types_comp_apply], }, }

/--
The sections of the functor `F : J ‚•§ Type v` are in bijection with the sections of
`F.eventual_ranges`.
-/
def to_eventual_ranges_sections_equiv
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) :
  F.to_eventual_ranges.sections ‚âÉ F.sections :=
{ to_fun := Œª ss,
    ‚ü® Œª j, (ss.val j).val,
      Œª i j f, by simpa only [‚Üêsubtype.coe_inj, subtype.coe_mk] using ss.prop f ‚ü©,
  inv_fun := Œª s,
    ‚ü® Œª j,
      ‚ü® s.val j, by
        { dsimp [eventual_range],
          simp only [set.mem_Inter, set.mem_range],
          exact Œª i f, ‚ü®s.val i, s.prop f‚ü©, } ‚ü©,
      Œª i j ij, subtype.mk_eq_mk.mpr (s.prop ij)‚ü©,
  left_inv := by
    { simp only [function.right_inverse, function.left_inverse, subtype.val_eq_coe, set_coe.forall,
                 subtype.coe_mk, subtype.coe_eta, eq_self_iff_true, implies_true_iff], },
  right_inv := by
    { simp only [function.left_inverse, function.right_inverse, eq_self_iff_true, set_coe.forall,
                 implies_true_iff, subtype.coe_mk], } }

/--
If `F` satisfies the Mittag-Leffler condition, its restriction to eventual ranges is a surjective
functor.
-/
lemma to_eventual_ranges_surjective
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) (ml : F.is_mittag_leffler) :
  ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.to_eventual_ranges.map f).surjective :=
begin
  rintros i j f ‚ü®x,hx‚ü©,
  rw is_mittag_leffler_iff_eventual_range at ml,
  obtain ‚ü®i‚ÇÄ,ii‚ÇÄ,ei‚ÇÄ‚ü© := ml i,
  obtain ‚ü®j‚ÇÄ,jj‚ÇÄ,ej‚ÇÄ‚ü© := ml j,
  obtain ‚ü®k,ki‚ÇÄ,kj‚ÇÄ,e‚ü© := category_theory.is_cofiltered.cone_over_cospan (ii‚ÇÄ ‚â´ f) jj‚ÇÄ,
  dsimp only [to_eventual_ranges],
  simp only [set_coe.exists],
  let ei := F.eventual_range_eq_range_precomp ki‚ÇÄ ii‚ÇÄ ei‚ÇÄ,
  let ej := F.eventual_range_eq_range_precomp kj‚ÇÄ jj‚ÇÄ ej‚ÇÄ,
  obtain ‚ü®z,rfl‚ü© := ej.rec_on hx,
  use F.map (ki‚ÇÄ ‚â´ ii‚ÇÄ) z,
  simp_rw [ei, set.mem_range_self, exists_true_left, ‚Üêe, functor_to_types.map_comp_apply],
  refl,
end

end functor
end category_theory
