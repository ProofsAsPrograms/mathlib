import category_theory.filtered
import topology.category.Top.limits
import data.finset.basic
import category_theory.category.basic
import category_theory.full_subcategory
import data.set.finite
import data.fintype.basic
import category_theory.types

universes u v w

open classical
open category_theory

noncomputable theory
local attribute [instance] prop_decidable


def category_theory.functor.eventual_range
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) :=
Œª (j : J), ‚ãÇ (i : J) (f : i ‚ü∂ j), set.range (F.map f)

def category_theory.functor.is_mittag_leffler
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) :=
  ‚àÄ (j : J), ‚àÉ (i) (f : i ‚ü∂ j),
             ‚àÄ (i') (f' : i' ‚ü∂ j), set.range (F.map f) ‚äÜ set.range (F.map f')

lemma category_theory.functor.is_mittag_leffler_iff_eventual_range
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) :
  F.is_mittag_leffler ‚Üî ‚àÄ (j : J), ‚àÉ (i : J) (f : i ‚ü∂ j), F.eventual_range j = set.range (F.map f) :=
begin
  dsimp [category_theory.functor.eventual_range],
  sorry,
end

lemma category_theory.is_cofiltered.min_eq_all
  {J : Type u} [category J] [is_cofiltered J] {i j j' : J} (f : j ‚ü∂ i) (f' : j' ‚ü∂ i)  :
  ‚àÉ (k : J) (g : k ‚ü∂ j) (g' : k ‚ü∂ j'), g ‚â´ f = g' ‚â´ f' :=
begin
  let h := is_cofiltered.min_to_left j j',
  let h' := is_cofiltered.min_to_right j j',
  let G := is_cofiltered.eq_hom (h ‚â´ f) (h' ‚â´ f'),
  refine ‚ü®_, G ‚â´ h, G ‚â´ h', _‚ü©,
  simp only [category.assoc, is_cofiltered.eq_condition],
end

/--
There is probably a nice general argument along the lines of:
* If J is cofiltered, then so is J/j (the comma category) for any j.
* The functor F : J ‚•§ Type v defines a functor J/j ‚•§ (F.obj j) by sending (f : i ‚ü∂ j) to set.range $ F.map f
* The image of a cofiltered category is cofiltered
-/
lemma category_theory.functor.ranges_directed_of_is_cofiltered
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) (j : J) :
  directed_on (‚äá) (set.range (Œª ( f : Œ£' (i : J), i ‚ü∂ j), set.range (F.map f.2))) :=
begin
  rintros _ ‚ü®‚ü®i,ij‚ü©,rfl‚ü© _ ‚ü®‚ü®k,kj‚ü©,rfl‚ü©,
  obtain ‚ü®l, li, lk, e‚ü© := category_theory.is_cofiltered.min_eq_all ij kj,
  refine ‚ü®set.range (F.map $ li ‚â´ ij), _‚ü©,
  rw [set.mem_range, exists_prop],
  refine ‚ü®‚ü®‚ü®l, li ‚â´ ij‚ü©, rfl‚ü©, ‚ü®_, _‚ü©‚ü©,
  { dsimp [superset], simp_rw [functor.map_comp, types_comp],
    apply set.range_comp_subset_range, },
  { dsimp [superset],
    simp_rw [e, functor.map_comp, types_comp],
    apply set.range_comp_subset_range, },
end

-- Probably exists somewhere
lemma directed_on_min {J : Type u} {s : set J} [preorder J] (h : directed_on (‚â•) s)
  (m ‚àà s) (min : ‚àÄ (a ‚àà s), a ‚â§ m ‚Üí a = m) : ‚àÄ a ‚àà s, m ‚â§ a :=
begin
  rintro a as,
  obtain ‚ü®x, xs, xm, xa‚ü© := h m H a as,
  cases (min x xs xm),
  exact xa,
end

/--
With enough `well_founded`-fu, one could probably weaken the `fintype` hypothesis to
```
  ‚àÄ (j i : J) (f :¬†i ‚ü∂ j), (set.range $ F.map f).finite
```
-/
lemma category_theory.functor.is_mittag_leffler_of_fintype
  {J : Type u} [category.{w} J] [is_cofiltered J] (F : J ‚•§ Type v)
  [Œ† (j : J), fintype (F.obj j)] :
  F.is_mittag_leffler :=
begin
  rintro j,
  haveI : nonempty (Œ£' i, i ‚ü∂ j) := ‚ü®‚ü®j,ùüô j‚ü©‚ü©,
  let f := function.argmin
             (Œª (f : Œ£' i, i ‚ü∂ j), set.range (F.map f.2))
             (finite.well_founded_of_trans_of_irrefl has_ssubset.ssubset),
  refine ‚ü®f.1, f.2, Œª i' f', _‚ü©,
  refine directed_on_min (F.ranges_directed_of_is_cofiltered j)
         (set.range (F.map f.2)) ‚ü®f,rfl‚ü© _
         (set.range (F.map f')) ‚ü®‚ü®i',f'‚ü©,rfl‚ü©,
  rintro _ ‚ü®g,rfl‚ü© klef,
  cases lt_or_eq_of_le klef,
  { exfalso,
    exact function.not_lt_argmin (Œª (f : Œ£' i, i ‚ü∂ j), set.range (F.map f.2)) _ g h, },
  { exact h, },
end

def category_theory.functor.to_eventual_ranges
  {J : Type u} [category J] [is_cofiltered J] (F : J ‚•§ Type v) : J ‚•§ Type v :=
{ obj := Œª j, F.eventual_range j,
  map := Œª i j f, set.maps_to.restrict (F.map f) _ _ ( by
    { rintro x h,
      simp only [category_theory.functor.eventual_range, set.mem_Inter, set.mem_range] at h ‚ä¢,
      rintro i' f',
      obtain ‚ü®l, g, g', e‚ü© := category_theory.is_cofiltered.min_eq_all f f',
      obtain ‚ü®z,rfl‚ü© := h l g,
      use F.map g' z,
      replace e := congr_fun (congr_arg F.map e) z,
      simp_rw functor_to_types.map_comp_apply at e,
      exact e.symm, } ),
  map_id' := by
    { rintros, ext,
      simp only [set.maps_to.coe_restrict_apply, types_id_apply, category_theory.functor.map_id], },
  map_comp' := by
    { intros, ext,
      simp only [functor.map_comp, set.maps_to.coe_restrict_apply, types_comp_apply], }, }




/-
section prerequisites

-- Thanks Junyan Xu
lemma sInter_of_directed_nonempty {Œ± : Type*} [fintype Œ±] [nonempty Œ±] (S : set (set Œ±))
  (allsnempty : ‚àÄ s ‚àà S, set.nonempty s) (dir : directed_on (‚äá) S) : S.sInter.nonempty :=
begin
  obtain rfl | h := S.eq_empty_or_nonempty,
  { rw set.sInter_empty, exact set.univ_nonempty },
  haveI := h.coe_sort,
  obtain ‚ü®‚ü®s, hs‚ü©, h'‚ü© := dir.directed_coe.finset_le set.finite_univ.to_finset,
  simp_rw set.finite.mem_to_finset at h',
  exact (allsnempty s hs).mono (Œª a ha t ht, h' ‚ü®t, ht‚ü© trivial ha),
end

lemma equiv.of_bijective_trans {Œ± Œ≤ Œ≥ : Type*} {f : Œ± ‚Üí Œ≤} {g : Œ≤ ‚Üí Œ≥}
  (hf : function.bijective f) (hg : function.bijective g) :
  (equiv.of_bijective f hf).trans (equiv.of_bijective g hg) =
   equiv.of_bijective (g ‚àò f) (function.bijective.comp hg hf) := by { ext, refl, }

end prerequisites




--set_option profiler true




variables {J : Type u} [preorder J] [is_directed J ge] (F : J ‚•§ Type v)


-- Thanks Junyan Xu
theorem nonempty_sections_of_fintype_inverse_system'
  [fin : Œ† (j : J), fintype (F.obj j)] [nempty : ‚àÄ (j : J), nonempty (F.obj j)] :
  F.sections.nonempty :=
begin
  casesI is_empty_or_nonempty J,
  { exact ‚ü®is_empty_elim, is_empty_elim‚ü©, },
  { exact nonempty_sections_of_fintype_cofiltered_system _, },
end

/--
`F.to_surjective` is the ‚Äúsurjective‚Äù part of `F`, in the sense that only the elements `x : F.obj j`
that have preimages through all `F.map` with codomain `F.obj j` are kept.
  -/
def category_theory.functor.to_surjective (F : J ‚•§ Type v) : J ‚•§ Type v :=
{ obj := Œª j, ‚ãÇ (i : {i | i ‚â§ j}), set.range (F.map (hom_of_le i.prop)),
  map := Œª i j ij, set.maps_to.restrict (F.map ij) _ _ ( by
    { rintro x h s ‚ü®‚ü®k, _‚ü©, rfl‚ü©,
      obtain ‚ü®l,lk,li‚ü© := directed_of ge k i,
      obtain ‚ü®y,rfl‚ü© := (set.mem_Inter).mp h ‚ü®l, li‚ü©,
      use F.map (hom_of_le lk) y,
      rw [‚Üêfunctor_to_types.map_comp_apply, ‚Üêfunctor_to_types.map_comp_apply],
      refl, } ),
  map_id' := by
    { rintros, ext,
      simp only [set.maps_to.coe_restrict_apply, types_id_apply, category_theory.functor.map_id], },
  map_comp' := by
    { intros, ext,
      simp only [functor.map_comp, set.maps_to.coe_restrict_apply, types_comp_apply], }, }




lemma to_surjective.subfunctor  (i j : J) (ij : i ‚ü∂ j) :
  subtype.simps.coe ‚àò F.to_surjective.map ij = (F.map ij) ‚àò subtype.simps.coe := rfl

lemma to_surjective.subfunctor_apply (i j : J) (ij : i ‚ü∂ j) (x : F.to_surjective.obj i) :
  subtype.simps.coe (F.to_surjective.map ij x) = F.map ij (subtype.simps.coe x) := rfl

instance to_surjective.fintype [Œ† (j : J), fintype (F.obj j)] :
  Œ† (j : J), fintype  (F.to_surjective.obj j) := Œª j, subtype.fintype _

instance to_surjective.nonempty
  [Œ† (j : J), fintype (F.obj j)] [Œ† (j : J), nonempty (F.obj j)] :
  Œ† (j : J), nonempty  (F.to_surjective.obj j) :=
begin
  rintro j,
  dsimp only [category_theory.functor.to_surjective],
  change nonempty (subtype _),
  rw nonempty_subtype,
  refine sInter_of_directed_nonempty _ _ _,
  { rintro s ‚ü®_, rfl‚ü©,
    exact set.range_nonempty _,},
  { rintro X ‚ü®‚ü®i,ij‚ü©,rfl‚ü© Y ‚ü®‚ü®k,kj‚ü©,rfl‚ü©,
    obtain ‚ü®l,lk,li‚ü© := directed_of (‚â•) k i,
    use [set.range (F.map $ hom_of_le lk ‚â´ hom_of_le kj), l, lk.le.trans kj, rfl],
    split,
    change hom_of_le lk ‚â´ hom_of_le kj with hom_of_le li ‚â´ hom_of_le ij,
    all_goals
    { rw [functor.map_comp, types_comp],
      apply set.range_comp_subset_range, }, },
end

lemma to_surjective.is_surjective
  [Œ† (j : J), fintype (F.obj j)] [nempties : Œ† (j : J), nonempty (F.obj j)] :
  ‚àÄ (i j : J) (ij : i ‚â§ j), function.surjective (F.to_surjective.map (hom_of_le ij)) :=
begin
  rintros i j ij ‚ü®x,xh‚ü©,

  let S := set.range
    (Œª k : {k : J | k ‚â§ i},
      (set.range (F.map (hom_of_le k.prop))) ‚à© set.preimage (F.map  $ hom_of_le ij) {x}),

  have Ssnempty : ‚àÄ s ‚àà S, set.nonempty s, by
  { rintro s hs,
    obtain ‚ü®‚ü®k,ki‚ü©,rfl‚ü© := hs,
    simp only [set.mem_set_of_eq] at ki,
    have xh : x ‚àà ‚ãÇ (l : {l | l ‚â§ j}), set.range (F.map (hom_of_le l.prop)) := xh,
    rw set.mem_Inter at xh,
    obtain ‚ü®z,rfl‚ü© := xh ‚ü®k,ki.trans ij‚ü©,
    use F.map (hom_of_le ki) z,
    use ‚ü®z,rfl‚ü©,
    simp only [set.mem_preimage, set.mem_singleton_iff],
    rw ‚Üêfunctor_to_types.map_comp_apply,
    reflexivity,},

  have : (‚ãÇ‚ÇÄ S).nonempty, by {
    refine sInter_of_directed_nonempty S Ssnempty _,
    unfold directed_on,
    rintros X ‚ü®‚ü®l,li‚ü©,rfl‚ü© Y ‚ü®‚ü®k,ki‚ü©,rfl‚ü©,
    rw set.mem_set_of_eq at li ki,
    obtain ‚ü®m,mk,ml‚ü© := directed_of (‚â•) k l,
    use set.range (F.map $ hom_of_le $ mk.le.trans ki) ‚à© set.preimage (F.map  $ hom_of_le ij) {x},
    use [m,mk.le.trans ki,rfl],
    split,
    change hom_of_le (mk.le.trans ki) with (hom_of_le ml.le) ‚â´ (hom_of_le li), rotate,
    change hom_of_le (mk.le.trans ki) with (hom_of_le mk.le) ‚â´ (hom_of_le ki),
    all_goals
    { apply set.inter_subset_inter_left,
      rw [functor.map_comp, types_comp],
      apply set.range_comp_subset_range,}, },

  obtain ‚ü®y,y_mem‚ü© := this,
  dsimp at y_mem,
  simp only [set.mem_Inter, set.mem_range, set.mem_preimage, set.mem_singleton_iff, subtype.forall]
    at y_mem,
  use y,
  { rintro s ‚ü®‚ü®m,mi‚ü©,rfl‚ü©,
    obtain ‚ü®‚ü®z,ztoy‚ü©,ytox‚ü© := y_mem m mi,
    use [z,ztoy],},
  { obtain ‚ü®‚ü®z,ztoy‚ü©,ytox‚ü© := y_mem i (le_refl i),
    apply subtype.mk_eq_mk.mpr ytox,},
end

namespace inverse_system

lemma sections_in_to_surjective (s : F.sections) (j : J) :
  (s.val j) ‚àà set.range (subtype.val : (F.to_surjective.obj j) ‚Üí F.obj j) :=
begin
  simp only [set.mem_range, set.mem_set_of_eq, set.Inter_coe_set, subtype.val_eq_coe,
             subtype.exists, set.mem_set_of_eq, set.Inter_coe_set, subtype.val_eq_coe,
             set.mem_range, subtype.exists],
  refine ‚ü®s.val j, _, rfl‚ü©,
  rintro s ‚ü®i,rfl‚ü©,
  simp only [set.mem_Inter],
  exact Œª ij, ‚ü®s.val i, s.prop (hom_of_le ij)‚ü©,
end

lemma sections_in_surjective' (s : F.sections) (j : J) :
  (s.val j) ‚àà ‚ãÇ (i : { i | i ‚â§ j}), set.range (F.map (hom_of_le i.prop)) :=
begin
  rw set.mem_Inter,
  rintro ‚ü®i,ij‚ü©,
  exact ‚ü®s.val i, s.prop (hom_of_le ij)‚ü©,
end

def to_surjective.sections_equiv : F.sections ‚âÉ F.to_surjective.sections :=
{ to_fun := Œª s,
    ‚ü® Œª j, ‚ü®s.val j, set.mem_Inter.mpr (Œª ii, ‚ü®s.val ii.val, s.prop (hom_of_le ii.prop)‚ü©)‚ü©,
      Œª i j ij, subtype.mk_eq_mk.mpr (s.prop ij)‚ü©,
  inv_fun := Œª ss,
    ‚ü® Œª j, (ss.val j).val, Œª i j ij,
      by simpa only [‚Üêsubtype.coe_inj, subtype.coe_mk] using ss.prop ij ‚ü©,
  left_inv := by
    { simp only [function.left_inverse, eq_self_iff_true, set_coe.forall, implies_true_iff], },
  right_inv := by
    { simp only [function.right_inverse, function.left_inverse, subtype.val_eq_coe, set_coe.forall,
                 subtype.coe_mk, subtype.coe_eta, eq_self_iff_true, implies_true_iff], } }

def sections_decomposition_at (j : J) :
  F.sections ‚âÉ Œ£ (x : F.obj j), {s : F.sections | s.val j = x} :=
{ to_fun := Œª s, ‚ü®s.val j, s, by simp only [set.mem_set_of_eq]‚ü©,
  inv_fun := Œª ss, ss.2.val,
  left_inv := by simp only [function.left_inverse, eq_self_iff_true, implies_true_iff],
  right_inv := by
    { simp only [function.right_inverse, function.left_inverse, subtype.val_eq_coe, sigma.forall],
      rintro x ‚ü®‚ü®s, sec‚ü©, h‚ü©,
      induction h,
      simp only [eq_self_iff_true, subtype.coe_mk, heq_iff_eq, subtype.mk_eq_mk, and_self], } }

lemma sections_eval_injective_of_functor_injective_above (j : J)
  (inj : ‚àÄ i : {i | i ‚â§ j}, function.injective $ F.map (hom_of_le i.prop)) :
  function.injective (Œª (s : F.sections), s.val j) :=
begin
  rintros ‚ü®e‚ÇÅ, h‚ÇÅ‚ü© ‚ü®e‚ÇÇ, h‚ÇÇ‚ü© h,
  rw subtype.mk_eq_mk,
  suffices : ‚àÄ i : {i | i ‚â§ j}, e‚ÇÅ i.val = e‚ÇÇ i.val,
  { ext k,
    obtain ‚ü®m,mk,mj‚ü© := directed_of (‚â•) k j,
    rw [‚Üêh‚ÇÅ (hom_of_le mk), ‚Üêh‚ÇÇ (hom_of_le mk), this ‚ü®m,mj‚ü©], },
  refine Œª ii, inj ii _,
  change F.map (hom_of_le _) (e‚ÇÅ ‚Üëii) = F.map (hom_of_le _) (e‚ÇÇ ‚Üëii),
  rw [h‚ÇÅ, h‚ÇÇ],
  exact h,
end

def sections_bijective (j : J)
  (bij : ‚àÄ i : {i | i ‚â§ j}, function.bijective $ F.map (hom_of_le i.prop)) :
  function.bijective (Œª (s :F.sections), s.val j) :=
begin
  let inj  := Œª ii : {i | i ‚â§ j}, (bij ii).1,
  let eqv  := Œª ii : {i | i ‚â§ j}, equiv.of_bijective (F.map (hom_of_le ii.prop)) (bij ii),
  refine ‚ü®sections_eval_injective_of_functor_injective_above F j inj, _‚ü©,

  rintro x,

  let s :  Œ† (i : J), {y : F.obj i | ‚àÉ (k : J) (ik : k ‚â§ i) (jk : k ‚â§ j),
                                       F.map (hom_of_le ik) ((eqv ‚ü®k,jk‚ü©).inv_fun x) = y}, by
  { rintro i,
    obtain ‚ü®mi,mj‚ü© := (directed_of (‚â•) i j).some_spec,
    exact ‚ü®F.map (hom_of_le mi) ((eqv ‚ü®_,mj‚ü©).inv_fun x), _, mi, mj, rfl‚ü©, },

  refine ‚ü®‚ü®Œª i, (s i).val, _‚ü©, _‚ü©,
  { rintro i k ik',
    obtain ‚ü®m,mi,mj,meq‚ü© := (s i).prop,
    obtain ‚ü®n,nk,nj,neq‚ü© := (s k).prop,
    obtain ‚ü®l,lm,ln‚ü© := (directed_of (‚â•) m n),

    have lmbij : function.bijective (F.map $ hom_of_le lm), by
    { refine (function.bijective.of_comp_iff' (bij ‚ü®m,mj‚ü©) (F.map $ hom_of_le lm)).mp _,
      rw [‚Üêcategory_theory.types_comp,‚Üêcategory_theory.functor.map_comp],
      exact bij ‚ü®l,lm.le.trans mj‚ü©, },
    have lnbij : function.bijective (F.map $ hom_of_le ln), by
    { refine (function.bijective.of_comp_iff' (bij ‚ü®n,nj‚ü©) (F.map $ hom_of_le ln)).mp _,
      rw [‚Üêcategory_theory.types_comp,‚Üêcategory_theory.functor.map_comp],
      exact bij ‚ü®l,ln.le.trans nj‚ü©, },

    simp only [subtype.val_eq_coe],
    rw [‚Üêmeq,‚Üêneq,
        ‚Üêfunctor_to_types.map_comp_apply,
        ‚Üê(equiv.right_inv (equiv.of_bijective _ lmbij) ((eqv ‚ü®m,mj‚ü©).inv_fun x)),
        ‚Üê(equiv.right_inv (equiv.of_bijective _ lnbij) ((eqv ‚ü®n,nj‚ü©).inv_fun x))],
    simp_rw [equiv.inv_fun_as_coe, equiv.to_fun_as_coe, equiv.of_bijective_apply,
             functor_to_types.map_comp_apply, ‚Üêfunctor_to_types.map_comp_apply],
    rw [‚Üêequiv.symm_trans_apply,‚Üêequiv.symm_trans_apply, equiv.of_bijective_trans,
        equiv.of_bijective_trans, ‚Üêequiv.inv_fun_as_coe,‚Üêequiv.inv_fun_as_coe],
    simp_rw [‚Üêtypes_comp, ‚Üêfunctor.map_comp'],
    reflexivity, },
  { obtain ‚ü®m,mj,mj',meq‚ü© := (s j).prop,
    simp only [subtype.val_eq_coe,‚Üêequiv.inv_fun_as_coe,‚Üêmeq],
    apply equiv.of_bijective_apply_symm_apply, },
end

lemma is_directed_of_coinitial
  (I : set J) (Icof : ‚àÄ j : J, ‚àÉ i ‚àà I, i ‚â§ j) : is_directed I ge :=
begin
  apply is_directed.mk,
  rintros ‚ü®i,iI‚ü© ‚ü®k,kI‚ü©,
  obtain ‚ü®j,ij,kj‚ü© := directed_of (ge) i k,
  obtain ‚ü®m,mI,jm‚ü© := Icof j,
  use ‚ü®m,mI‚ü©,
  simp only [ge_iff_le, subtype.mk_le_mk],
  exact ‚ü®jm.trans ij.le, jm.trans kj.le‚ü©,
end

instance lower_directed
  (j : J) : is_directed {i : J | i ‚â§ j} ge :=
begin
  apply is_directed_of_coinitial,
  rintros i,
  obtain ‚ü®k,ik,jk‚ü© := directed_of (ge) i j,
  exact ‚ü®k,jk,ik‚ü©,
end

/--
The inverse system obtained by restring `F` to the index set above `j` and only to values
that map to `x`
-/
def above_point (j : J) (x : F.obj j) : {i : J | i ‚â§ j} ‚•§ Type v :=
{ obj := Œª ii, set.preimage (F.map $ hom_of_le ii.prop) {x},
  map := Œª ii kk ik, set.maps_to.restrict (F.map $ ik) _ _ $ Œª y, eq.rec $ by
  { rw [set.mem_preimage, set.mem_singleton_iff, ‚Üêfunctor_to_types.map_comp_apply], refl, },
  map_id' := Œª ii, funext $ Œª ‚ü®x,xh‚ü©, by
  { simp only [types_id_apply, set.maps_to.restrict, subtype.map, subtype.coe_mk, subtype.mk_eq_mk],
    nth_rewrite_rhs 0 ‚Üêfunctor_to_types.map_id_apply F x,
    reflexivity, },
  map_comp' := Œª ii kk ll ik kl, funext $ Œª ‚ü®x,xh‚ü©, by
  { simp only [types_comp_apply, set.maps_to.restrict, subtype.map, subtype.coe_mk,
               subtype.mk_eq_mk, ‚Üêfunctor_to_types.map_comp_apply],
    reflexivity, } }


instance above_point.nonempty [Œ† (j : J), fintype (F.obj j)] [‚àÄ (j : J), nonempty (F.obj j)]
  (j : J)
  (Fsurj : ‚àÄ i (ij : i ‚â§ j), function.surjective (F.map $ hom_of_le ij))
  (x : F.obj j) :
  Œ† (i : {i : J | i ‚â§ j}), nonempty ((above_point F j x).obj i)  :=
begin
  rintro ii,
  obtain ‚ü®y,rfl‚ü© := Fsurj ii.val ii.prop x,
  refine nonempty.intro ‚ü®y, _‚ü©,
  simp only [set.mem_preimage, set.mem_singleton],
end

instance above_point.fintype [Œ† (j : J), fintype (F.obj j)] [‚àÄ (j : J), nonempty (F.obj j)]
  (j : J) (x : F.obj j) : Œ† (i : {i : J | i ‚â§ j}), fintype ((above_point F j x).obj i)  :=
Œª ii, subtype.fintype _

lemma above_point.sections_nonempty (j : J)
  (Fsurj : ‚àÄ i (ij : i ‚â§ j), function.surjective (F.map $ hom_of_le ij))
  [Œ† (j : J), fintype (F.obj j)] [‚àÄ (j : J), nonempty (F.obj j)]
  (x : F.obj j) : nonempty (above_point F j x).sections :=
begin
  apply set.nonempty_coe_sort.mpr,
  exact @nonempty_sections_of_fintype_inverse_system' _ _ _ (above_point F j x)
    (above_point.fintype F j x)  (above_point.nonempty F j Fsurj x),
end

private def sections_at_point_fwd  (j : J) (x : F.obj j) :
  {s : F.sections | s.val j = x} ‚Üí (above_point F j x).sections :=
Œª ‚ü®‚ü®s, sec‚ü©, sjx‚ü©,
  ‚ü®Œª ii, ‚ü®s ii.val, eq.rec_on sjx $ sec $ hom_of_le ii.prop‚ü©,
   Œª ii kk ik, by simpa only [sjx, ‚Üêsubtype.coe_inj, set.maps_to.coe_restrict_apply,
                              subtype.coe_mk] using sec ik‚ü©

private def sections_at_point_bwd_aux (j : J) (x : F.obj j) :
  Œ† (s : (above_point F j x).sections) (i : J),
                 {y : F.obj i | ‚àÉ (k : J) (ik : k ‚â§ i) (jk : k ‚â§ j),
                                y =  F.map (hom_of_le ik) (s.val $  ‚ü®k,jk‚ü©).val} :=
Œª ‚ü®s,sec‚ü© i, let mm := (directed_of (‚â•) i j) in
  ‚ü® F.map (hom_of_le mm.some_spec.1) (s ‚ü®mm.some,mm.some_spec.2‚ü©).val,
    mm.some, mm.some_spec.1, mm.some_spec.2, rfl ‚ü©

private def sections_at_point_bwd  (j : J) (x : F.obj j) :
  (above_point F j x).sections ‚Üí {s : F.sections | s.val j = x} :=
Œª ss,
‚ü® ‚ü® (Œª i,  (sections_at_point_bwd_aux F j x ss i).val),
    by
    { rintro i k ik',
      obtain ‚ü®m,mi,mj,meq‚ü© := (sections_at_point_bwd_aux F j x ss i).prop,
      obtain ‚ü®n,nk,nj,neq‚ü© := (sections_at_point_bwd_aux F j x ss k).prop,
      obtain ‚ü®l,lm,ln‚ü© := (directed_of (‚â•) m n),
      obtain ‚ü®s,sec‚ü© := ss,
      simp_rw [subtype.val_eq_coe, meq, neq,
               ‚Üê(@sec  ‚ü®l, lm.le.trans mj‚ü© ‚ü®m, mj‚ü© (hom_of_le $ lm)),
               ‚Üê(@sec  ‚ü®l, ln.le.trans nj‚ü© ‚ü®n, nj‚ü© (hom_of_le $ ln))],
      dsimp [above_point],
      simp_rw [‚Üêfunctor_to_types.map_comp_apply],
      reflexivity,} ‚ü©,
  by
  { obtain ‚ü®s,sec‚ü© := ss,
    simp only [subtype.val_eq_coe, set.mem_set_of_eq, subtype.coe_mk],
    obtain ‚ü®y,k,jk,jk',rfl‚ü© := sections_at_point_bwd_aux F j x ‚ü®s, @sec‚ü© j,
    simp only [subtype.val_eq_coe, subtype.coe_mk],
    exact (s ‚ü®k,jk‚ü©).prop, } ‚ü©

def sections_at_point (j : J) (x : F.obj j) :
  {s : F.sections | s.val j = x} ‚âÉ (above_point F j x).sections :=
{ to_fun := sections_at_point_fwd F j x,
  inv_fun := sections_at_point_bwd F j x,
  left_inv := by
  { rintro ‚ü®‚ü®s, sec‚ü©, sjx‚ü©,
    simp only [set.mem_set_of_eq] at sjx,
    induction sjx,
    apply subtype.mk_eq_mk.mpr, apply subtype.mk_eq_mk.mpr,
    funext i,
    obtain ‚ü®a,k,ki,kj,e‚ü© := sections_at_point_bwd_aux F j (s j)
                              (sections_at_point_fwd F j (s j) ‚ü®‚ü®s, Œª _ _, sec‚ü©,rfl‚ü©) i,
    simpa only [‚Üêsec (hom_of_le ki)] using e, },
  right_inv := by
  { rintro ‚ü®s, sec‚ü©,
    simp only [sections_at_point_fwd, sections_at_point_bwd, subtype.val_eq_coe, subtype.mk_eq_mk],
    funext i,
    obtain ‚ü®k,ki,kj,e‚ü© := (sections_at_point_bwd_aux F j x ‚ü®s, @sec‚ü© i).prop,
    simp only [‚Üêsec (hom_of_le (by {exact ki} : (‚ü®k,kj‚ü© : {i | i ‚â§ j}) ‚â§ i)),
               subtype.val_eq_coe, ‚Üêsubtype.coe_inj,set.maps_to.coe_restrict_apply] at e ‚ä¢,
    obtain ‚ü®_,_‚ü© := s ‚ü®k,kj‚ü©,
    -- magic going on here ^: deconstructing `s ‚ü®k,kj‚ü©` reverts `e`, which is actually nice for us
    exact id, } }

lemma sections_decomposition_at'
  [Œ† (j : J), fintype (F.obj j)] [‚àÄ (j : J), nonempty (F.obj j)] (j : J) :
  F.sections ‚âÉ Œ£ (x : F.obj j), (above_point F j x).sections :=
(sections_decomposition_at F j).trans (equiv.sigma_congr_right (sections_at_point F j))

lemma sections_surjective [Œ† (j : J), fintype (F.obj j)]
  (j : J) (Fsurj : ‚àÄ i (ij : i ‚â§ j), function.surjective (F.map $ hom_of_le ij)) :
  function.surjective (Œª (s : F.sections), s.val j) :=
begin
  rintro x,
  haveI : Œ† (j : J), nonempty (F.obj j), by
  { rintro i,
    obtain ‚ü®li,lj‚ü© := (directed_of (‚â•) i j).some_spec,
    exact ‚ü®F.map (hom_of_le li) (Fsurj _ lj x).some‚ü©, },
  obtain ‚ü®s_above‚ü© := above_point.sections_nonempty F j Fsurj x,
  obtain ‚ü®s,sjx‚ü© := (sections_at_point F j x).inv_fun s_above,
  exact ‚ü®s,sjx‚ü©,
end

lemma sections_surjective' [Œ† (j : J), fintype (F.obj j)]
  (j : J) (Fsurj : ‚àÄ (i j : J) (ij : i ‚â§ j), function.surjective (F.map $ hom_of_le ij)) :
  function.surjective (Œª (s : F.sections), s.val j) :=
begin
  apply sections_surjective F j,
  rintro i ij, exact Fsurj i j ij,
end

lemma sections_fintype_to_injective
  [nonempty J] [Œ† (j : J), fintype (F.obj j)] [fintype F.sections]
  (Fsur : ‚àÄ (i j : J) (ij : i ‚â§ j), function.surjective (F.map $ hom_of_le ij)) :
  ‚àÉ j : J, ‚àÄ i (ij : i ‚â§ j), function.injective (F.map $ hom_of_le ij) :=
begin
  have : Œ† (j : J), fintype.card (F.obj j) ‚â§ fintype.card F.sections, from
    Œª j, fintype.card_le_of_surjective _ (sections_surjective' F j Fsur),
  let cards := set.range (Œª j, fintype.card $ F.obj j),
  haveI cardsnem : cards.nonempty := set.range_nonempty (Œª (j : J), fintype.card (F.obj j)),
  haveI cardsfin : cards.finite := by
  { apply set.finite.subset,
    exact {n : ‚Ñï | n ‚â§ fintype.card ‚Ü•(functor.sections F)}.to_finite,
    rintro jm ‚ü®j,rfl‚ü©,
    exact this j,},
  let m := cardsfin.to_finset.max' ((set.finite.nonempty_to_finset cardsfin).mpr cardsnem),
  let mmem := cardsfin.to_finset.max'_mem ((set.finite.nonempty_to_finset cardsfin).mpr cardsnem),
  rw [set.finite.mem_to_finset, set.mem_range] at mmem,
  obtain ‚ü®j, jm‚ü© := mmem,
  refine ‚ü®j, Œª i ij, function.bijective.injective _‚ü©,
  rw fintype.bijective_iff_surjective_and_card,
  refine ‚ü®Fsur i j ij, _‚ü©,
  symmetry,
  apply (fintype.card_le_of_surjective _ (Fsur i j ij)).antisymm,
  rw jm,
  apply cardsfin.to_finset.le_max' (fintype.card $ F.obj i),
  simp only [set.finite.mem_to_finset, set.mem_range, exists_apply_eq_apply],
end

end inverse_system
-/
