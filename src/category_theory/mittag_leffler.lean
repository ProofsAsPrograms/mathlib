/-
Copyright (c) 2022 R√©mi Bottinelli. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: R√©mi Bottinelli
-/
import category_theory.filtered
import topology.category.Top.limits
import data.finset.basic
import category_theory.category.basic
import category_theory.full_subcategory
import data.set.finite
import data.fintype.basic
import category_theory.types

/-!
# The Mittag-Leffler condition

This files defines the Mittag-Leffler condition for cofiltered systems and (TODO) other properties
of such systems and their sections.

## Main definitions

Given a functor `F : J ‚•§ Type v`:

* For `j : J`, `F.eventual_range j` is the intersections of all ranges of morphisms `F.map f`
  where `f` has codomain `j`.
* `F.is_mittag_leffler` states that the functor `F` satisfies the Mittag-Leffler
  condition: the ranges of morphisms `F.map f` (with `f` having codomain `j`) stabilize.
* If `J` is cofiltered `F.to_eventual_ranges` is the subfunctor of `F` obtained by restriction
  to `F.eventual_range`.


## Main statements

* `is_mittag_leffler_of_exists_finite_range` shows that if `J` is cofiltered and for all `j`,
  there exists some `i` and `f : i ‚ü∂ j` such that the range of `F.map f` is finite, then
  `F` is Mittag-Leffler.
* `to_eventual_ranges_surjective` shows that if `F` is Mittag-Leffler, then `F.to_eventual_ranges`
  has all morphisms `F.map f` surjective.

## Todo

* Specialize to inverse systems and fintype systems.
* Prove [Stacks: Lemma 0597](https://stacks.math.columbia.edu/tag/0597)

## References

* [Stacks: Mittag-Leffler systems](https://stacks.math.columbia.edu/tag/0594)

## Tags

Mittag-Leffler, surjective, eventual range, inverse system,

-/

universes u v

-- Two lemmas that should go into order.directed
lemma directed_on_range {Œ± Œ≤} {r : Œ± ‚Üí Œ± ‚Üí Prop} {f : Œ≤ ‚Üí Œ±} :
  directed r f ‚Üî directed_on r (set.range f) :=
by simp_rw [directed, directed_on, set.forall_range_iff, set.exists_range_iff]

private lemma directed_on.is_bot_of_is_min {J : Type u} {s : set J} [preorder J]
  (h : directed_on (‚â•) s) (m ‚àà s) (min : ‚àÄ (a ‚àà s), a ‚â§ m ‚Üí m ‚â§ a) : ‚àÄ a ‚àà s, m ‚â§ a :=
Œª a as, let ‚ü®x, xs, xm, xa‚ü© := h m H a as in (min x xs xm).trans xa

namespace category_theory
namespace functor

variables {J : Type u} [category J] (F : J ‚•§ Type v) {i j k : J} (s : set (F.obj i))

/- to remove -/
lemma _root_.category_theory.is_cofiltered.cone_over_cospan
  {J : Type u} [category J] [is_cofiltered_or_empty J] {i j j' : J} (f : j ‚ü∂ i) (f' : j' ‚ü∂ i) :
  ‚àÉ (k : J) (g : k ‚ü∂ j) (g' : k ‚ü∂ j'), g ‚â´ f = g' ‚â´ f' :=
let ‚ü®k', h, h', _‚ü© := is_cofiltered_or_empty.cocone_objs j j',
    ‚ü®k, G, he‚ü© := is_cofiltered_or_empty.cocone_maps (h ‚â´ f) (h' ‚â´ f') in
‚ü®k, G ‚â´ h, G ‚â´ h', by simpa only [category.assoc]‚ü©

open is_cofiltered set functor_to_types

/--
The eventual range of the functor `F : J ‚•§ Type v` at index `j : J` is the intersection
of the ranges of all maps `F.map f` with `i : J` and `f : i ‚ü∂ j`.
-/
def eventual_range (j : J) := ‚ãÇ i (f : i ‚ü∂ j), range (F.map f)

lemma mem_eventual_range_iff {x : F.obj j} :
  x ‚àà F.eventual_range j ‚Üî ‚àÄ ‚¶Éi‚¶Ñ (f : i ‚ü∂ j), x ‚àà range (F.map f) := mem_Inter‚ÇÇ

/--
The functor `F : J ‚•§ Type v` satisfies the Mittag-Leffler condition if for all `j : J`,
there exists some `i : J` and `f : i ‚ü∂ j` such that for all `k : J` and `g : k ‚ü∂ j`, the range
of `F.map f` is contained in that of `F.map g`;
in other words (see `is_mittag_leffler_iff_eventual_range`), the eventual range at `j` is attained
by some `f : i ‚ü∂ j`.
-/
def is_mittag_leffler : Prop :=
‚àÄ j : J, ‚àÉ i (f : i ‚ü∂ j), ‚àÄ ‚¶Ék‚¶Ñ (g : k ‚ü∂ j), range (F.map f) ‚äÜ range (F.map g)

lemma is_mittag_leffler_iff_eventual_range : F.is_mittag_leffler ‚Üî
  ‚àÄ j : J, ‚àÉ i (f : i ‚ü∂ j), F.eventual_range j = range (F.map f) :=
forall_congr $ Œª j, exists‚ÇÇ_congr $ Œª i f,
  ‚ü®Œª h, (Inter‚ÇÇ_subset _ _).antisymm $ subset_Inter‚ÇÇ h, Œª h, h ‚ñ∏ Inter‚ÇÇ_subset‚ü©

lemma is_mittag_leffler.subset_image_eventual_range (h : F.is_mittag_leffler) (f : j ‚ü∂ i) :
  F.eventual_range i ‚äÜ F.map f '' (F.eventual_range j) :=
begin
  obtain ‚ü®k, g, hg‚ü© := F.is_mittag_leffler_iff_eventual_range.1 h j,
  rw hg, intros x hx,
  obtain ‚ü®x, rfl‚ü© := F.mem_eventual_range_iff.1 hx (g ‚â´ f),
  refine ‚ü®_, ‚ü®x, rfl‚ü©, by simpa only [F.map_comp]‚ü©,
end

lemma eventual_range_eq_range_precomp (f : i ‚ü∂ j) (g : j ‚ü∂ k)
  (h : F.eventual_range k = range (F.map g)) :
  F.eventual_range k = range (F.map $ f ‚â´ g) :=
begin
  apply subset_antisymm,
  { apply Inter‚ÇÇ_subset, },
  { rw [h, F.map_comp], apply range_comp_subset_range, }
end

lemma is_mittag_leffler_of_surjective
  (h : ‚àÄ (i j : J) (f : i ‚ü∂ j), (F.map f).surjective) : F.is_mittag_leffler :=
Œª j, ‚ü®j, ùüô j, Œª k g, by rw [map_id, types_id, range_id, (h k j g).range_eq]‚ü©

@[simps] def restrict : J ‚•§ Type v :=
{ obj := Œª j, ‚ãÇ f : j ‚ü∂ i, F.map f ‚Åª¬π' s,
  map := Œª j k g, maps_to.restrict (F.map g) _ _ $ Œª x h, begin
    rw [mem_Inter] at h ‚ä¢, intro f,
    rw [‚Üê mem_preimage, preimage_preimage],
    convert h (g ‚â´ f), rw F.map_comp, refl,
  end,
  map_id' := Œª j, by { simp_rw F.map_id, ext, refl },
  map_comp' := Œª j k l f g, by { simp_rw F.map_comp, refl } }

variable [is_cofiltered_or_empty J]

lemma eventual_range_maps_to (f : j ‚ü∂ i) :
  (F.eventual_range j).maps_to (F.map f) (F.eventual_range i) :=
Œª x hx, begin
  rw mem_eventual_range_iff at hx ‚ä¢,
  intros k f',
  obtain ‚ü®l, g, g', he‚ü© := cone_over_cospan f f',
  obtain ‚ü®x, rfl‚ü© := hx g,
  rw [‚Üê map_comp_apply, he, F.map_comp],
  exact ‚ü®_, rfl‚ü©,
end

lemma is_mittag_leffler.eq_image_eventual_range (h : F.is_mittag_leffler)
  (f : j ‚ü∂ i) : F.eventual_range i = F.map f '' (F.eventual_range j) :=
(h.subset_image_eventual_range F f).antisymm $ maps_to'.1 (F.eventual_range_maps_to f)

lemma is_mittag_leffler_iff_subset_range_comp : F.is_mittag_leffler ‚Üî
  ‚àÄ j : J, ‚àÉ i (f : i ‚ü∂ j), ‚àÄ ‚¶Ék‚¶Ñ (g : k ‚ü∂ i), range (F.map f) ‚äÜ range (F.map $ g ‚â´ f) :=
begin
  refine forall_congr (Œª j, exists‚ÇÇ_congr $ Œª i f, ‚ü®Œª h k g, h _, Œª h j' f', _‚ü©),
  obtain ‚ü®k, g, g', he‚ü© := cone_over_cospan f f',
  refine (h g).trans _,
  rw [he, F.map_comp],
  apply range_comp_subset_range,
end

lemma is_mittag_leffler.restrict (h : F.is_mittag_leffler) :
  (F.restrict s).is_mittag_leffler :=
(is_mittag_leffler_iff_subset_range_comp _).2 $ Œª j, begin
  obtain ‚ü®j‚ÇÅ, g‚ÇÅ, f‚ÇÅ, -‚ü© := is_cofiltered_or_empty.cocone_objs i j,
  obtain ‚ü®j‚ÇÇ, f‚ÇÇ, h‚ÇÇ‚ü© := F.is_mittag_leffler_iff_eventual_range.1 h j‚ÇÅ,
  refine ‚ü®j‚ÇÇ, f‚ÇÇ ‚â´ f‚ÇÅ, Œª j‚ÇÉ f‚ÇÉ, _‚ü©,
  rintro _ ‚ü®‚ü®x, hx‚ü©, rfl‚ü©,
  have : F.map f‚ÇÇ x ‚àà F.eventual_range j‚ÇÅ, { rw h‚ÇÇ, exact ‚ü®_, rfl‚ü© },
  obtain ‚ü®y, hy, h‚ÇÉ‚ü© := h.subset_image_eventual_range F (f‚ÇÉ ‚â´ f‚ÇÇ) this,
  refine ‚ü®‚ü®y, mem_Inter.2 $ Œª g‚ÇÇ, _‚ü©, _‚ü©,
  { obtain ‚ü®j‚ÇÑ, f‚ÇÑ, h‚ÇÑ‚ü© := is_cofiltered_or_empty.cocone_maps g‚ÇÇ ((f‚ÇÉ ‚â´ f‚ÇÇ) ‚â´ g‚ÇÅ),
    obtain ‚ü®y, rfl‚ü© := F.mem_eventual_range_iff.1 hy f‚ÇÑ,
    rw ‚Üê map_comp_apply at h‚ÇÉ,
    rw [mem_preimage, ‚Üê map_comp_apply, h‚ÇÑ, ‚Üê category.assoc, map_comp_apply, h‚ÇÉ, ‚Üê map_comp_apply],
    apply mem_Inter.1 hx },
  { ext1, simp_rw [restrict_map, maps_to.coe_restrict_apply, subtype.coe_mk],
    rw [‚Üê category.assoc, map_comp_apply, h‚ÇÉ, map_comp_apply] },
end

lemma range_directed_of_is_cofiltered (j : J) :
  directed (‚äá) (Œª f : Œ£' i, i ‚ü∂ j, range (F.map f.2)) :=
begin
  rintros ‚ü®i, ij‚ü© ‚ü®k, kj‚ü©,
  obtain ‚ü®l, li, lk, e‚ü© := cone_over_cospan ij kj,
  refine ‚ü®‚ü®l, li ‚â´ ij‚ü©, _, _‚ü©, swap 2, rw e,
  all_goals { simp_rw F.map_comp, apply range_comp_subset_range, },
end

lemma is_mittag_leffler_of_exists_finite_range
  (h : ‚àÄ (j : J), ‚àÉ i (f : i ‚ü∂ j), (range (F.map f)).finite) :
  F.is_mittag_leffler :=
begin
  rintro j,
-- trying to use `well_founded.has_min`
  suffices : ‚àÉ (f : Œ£' i, i ‚ü∂ j), ‚àÄ (f' : Œ£' i, i ‚ü∂ j),
               range (F.map f'.2) ‚â§ range (F.map f.2) ‚Üí
                 range (F.map f'.2) = range (F.map f.2),
  { obtain ‚ü®‚ü®i, f‚ü©, fmin‚ü© := this,
    refine ‚ü®i, f, Œª i' f', _‚ü©,
    have := (directed_on_range.mp $ F.range_directed_of_is_cofiltered j).is_bot_of_is_min,
    sorry,
    refine directed_on_min (F.ranges_directed_of_is_cofiltered j) _ ‚ü®‚ü®i, f‚ü©,rfl‚ü© _ _ ‚ü®‚ü®i',f'‚ü©,rfl‚ü©,
    simp only [mem_range, psigma.exists, forall_exists_index],
    rintro _ k g rfl gf,
    exact fmin ‚ü®k,g‚ü© gf, },

  let fins := subtype { f : Œ£' i, i ‚ü∂ j | (range (F.map f.2)).finite },
  haveI : nonempty fins := by { obtain ‚ü®i,f,fin‚ü© := h j, exact ‚ü®‚ü®‚ü®i,f‚ü©,fin‚ü©‚ü©, },
  let fmin := function.argmin (Œª (f : fins), f.prop.to_finset.card) nat.lt_wf,
  use fmin.val,
  rintro g gf,
  cases lt_or_eq_of_le gf,
  { have gfin : (range (F.map g.2)).finite := fmin.prop.subset gf,
    refine ((Œª (f : fins), f.prop.to_finset.card).not_lt_argmin nat.lt_wf ‚ü®g, gfin‚ü© _).elim,
    exact finset.card_lt_card (set.finite.to_finset_ssubset.mpr h_1), },
  { assumption, },
end

/--
The subfunctor of `F` obtained by restricting to the eventual range at each index.
-/
def to_eventual_ranges : J ‚•§ Type v :=
{ obj := Œª j, F.eventual_range j,
  map := Œª i j f, (F.eventual_range_maps_to f).restrict _ _ _,
  map_id' := Œª i, by { simp_rw F.map_id, ext, refl },
  map_comp' := Œª _ _ _ _ _, by { simp_rw F.map_comp, refl } }

/--
The sections of the functor `F : J ‚•§ Type v` are in bijection with the sections of
`F.eventual_ranges`.
-/
def to_eventual_ranges_sections_equiv : F.to_eventual_ranges.sections ‚âÉ F.sections :=
{ to_fun := Œª ss, ‚ü®_, Œª i j f, subtype.coe_inj.2 $ ss.prop f‚ü©,
  inv_fun := Œª s, ‚ü®Œª j, ‚ü®_, mem_Inter‚ÇÇ.2 $ Œª i f, ‚ü®_, s.prop f‚ü©‚ü©, Œª i j f, subtype.ext $ s.prop f‚ü©,
  left_inv := Œª _, by { ext, refl },
  right_inv := Œª _, by { ext, refl } }

/--
If `F` satisfies the Mittag-Leffler condition, its restriction to eventual ranges is a surjective
functor.
-/
lemma surjective_to_eventual_ranges (h : F.is_mittag_leffler) (i j : J) (f : i ‚ü∂ j) :
  (F.to_eventual_ranges.map f).surjective :=
Œª ‚ü®x, hx‚ü©, by { obtain ‚ü®y, hy, rfl‚ü© := h.subset_image_eventual_range F f hx, exact ‚ü®‚ü®y, hy‚ü©, rfl‚ü© }

end functor
end category_theory
